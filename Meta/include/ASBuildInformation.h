
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.
    Authors(from Quasar team): Piotr Nikiel

    This file is part of Quasar.

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.

    This file was completely generated by Quasar (additional info: using transform designToClassHeader.xslt)
    on 2018-11-09T17:06:15.869+01:00
 */



#ifndef __ASBuildInformation__H__
#define __ASBuildInformation__H__


#include <opcua_baseobjecttype.h>
#include <opcua_basedatavariabletype.h>

#include <methodhandleuanode.h>
#include <ASDelegatingMethod.h>

#include <Configuration.hxx>

#include <ASNodeManager.h>
#include <ASDelegatingVariable.h>


#include <ASSourceVariable.h>


/* forward declaration */
namespace Device {
class DBuildInformation;
}


namespace AddressSpace
{
//! Fully auto-generated class to represent BuildInformation in the OPC UA AddressSpace
class ASBuildInformation: public OpcUa::BaseObjectType
{
    UA_DISABLE_COPY(ASBuildInformation);
public:



    //! Constructor. Used in Configurator.cpp. You NEVER use it directly.
    ASBuildInformation (
        UaNodeId parentNodeId,
        const UaNodeId& typeNodeId,
        ASNodeManager *nm,
        const std::string& host, const std::string& timestamp, const std::string commitID, const std::string& toolkitLibs);



    /*dtor*/
    ~ASBuildInformation ();



    /* setters and getters for variables */



    UaStatus getBuildHost (UaString &) const ;
    UaStatus setBuildHost (const UaString & value, OpcUa_StatusCode statusCode,const UaDateTime & srcTime = UaDateTime::now()) ;



    /* short getter (possible because nullPolicy=nullForbidden) */
    UaString getBuildHost () const;



    UaStatus getBuildTimestamp (UaString &) const ;
    UaStatus setBuildTimestamp (const UaString & value, OpcUa_StatusCode statusCode,const UaDateTime & srcTime = UaDateTime::now()) ;



    /* short getter (possible because nullPolicy=nullForbidden) */
    UaString getBuildTimestamp () const;



    UaStatus getCommitID (UaString &) const ;
    UaStatus setCommitID (const UaString & value, OpcUa_StatusCode statusCode,const UaDateTime & srcTime = UaDateTime::now()) ;



    /* short getter (possible because nullPolicy=nullForbidden) */
    UaString getCommitID () const;



    UaStatus getToolkitLibs (UaString &) const ;
    UaStatus setToolkitLibs (const UaString & value, OpcUa_StatusCode statusCode,const UaDateTime & srcTime = UaDateTime::now()) ;



    /* short getter (possible because nullPolicy=nullForbidden) */
    UaString getToolkitLibs () const;








    /* delegators for cachevariables  */





    /* Device Logic setter (if requested) */

    void linkDevice( Device::DBuildInformation *deviceLink);
    void unlinkDevice ();
    Device::DBuildInformation * getDeviceLink () const {
        return m_deviceLink;
    }

    /* OPC UA Type Information provider for this class. */
    virtual UaNodeId typeDefinitionId () const {
        return m_typeNodeId;
    }




private:
    UaNodeId m_typeNodeId;
    /* Variables */
    OpcUa::BaseDataVariableType
    * m_BuildHost;
    OpcUa::BaseDataVariableType
    * m_BuildTimestamp;
    OpcUa::BaseDataVariableType
    * m_CommitID;
    OpcUa::BaseDataVariableType
    * m_ToolkitLibs;


    /* Methods */


    /* Device Logic link (if requested) */

    Device::DBuildInformation *m_deviceLink;




};

}



#endif // include guard

