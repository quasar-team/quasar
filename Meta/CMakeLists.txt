# LICENSE:
# Copyright (c) 2015, CERN
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Author: Benjamin Farnham <benjamin.farnham@cern.ch>

# == Brief note on BuildInfo generation ==
# Amongst other things, at build time Meta generates a <BINARY-DIR>/generated/MetaBuildInfoGenerated.h file. The contents
# of this file are key elements of the environment, captured at build time. These values are displayed via the address 
# space with the goal of helping identify which build of a server is currently running (via inspection using an OPC-UA 
# client)
#
# File <BINARY-DIR>/generated/MetaBuildInfoGenerated.h is generated by a call to python script meta_build_info.py. This
# python script should execute on *every* build.
#
# == And now a note on amalgamation of Meta (Piotr Nikiel)
# Meta, as its 'first approach' is simply made by quasar itself, i.e. a quasar server was once made 
# with a Design corresponding to what one sees as StandardMetaData. The address-space and device sources,
# and XSD schema was exported from the project, and along certain custom-made additions made it to the Meta module.
# This structure is not very build-time friendly though; a total of 20+ source files are compiled where 99% is
# composed of same included headers and less than 1% is the real code. Therefore it pays off to amalgamate files
# sharing same headers; with an 'empty' quasar server this yields a build time reduction of about 2x (significant!).
# The reason that MetaBuildInfo.cpp is not amalgamated is that it depends on a file which is regenerated at each build
# and there is no reason to rebuild amalgamated files without the factual reason!

add_library (Meta OBJECT 
  src/meta.cpp 
  src/MetaBuildInfo.cpp 
  src/metaBackwardsCompatibilityUtils.cpp 
  src/DLogLevel.cpp
  src/DSourceVariableThreadPool.cpp)

file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/generated)

add_custom_target(runBuildInfoGeneratorPy ALL
	DEPENDS alwaysRunBuildInfoGeneratorPy
)

# Handle toolkit libs (quotes ensure proper handling of empty values)
string(REPLACE "-l" "_l" OPCUA_TOOLKIT_LIBS_ESCAPED "${OPCUA_TOOLKIT_LIBS}")

add_custom_command(OUTPUT alwaysRunBuildInfoGeneratorPy # note output never actually created: ensures cmd always runs
	COMMENT "generating meta build info definitions header using python script" 
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	DEPENDS ${CMAKE_CURRENT_LIST_DIR}/../FrameworkInternals/meta_build_info.py
	COMMAND ${PYTHON_COMMAND} ${CMAKE_CURRENT_LIST_DIR}/../FrameworkInternals/meta_build_info.py --project_root_dir ${CMAKE_SOURCE_DIR} --target_generation_dir ${PROJECT_BINARY_DIR}/generated --toolkit_libs "${OPCUA_TOOLKIT_LIBS_ESCAPED}"
	VERBATIM
)

add_custom_target(designWithMeta ALL DEPENDS ${PROJECT_BINARY_DIR}/Design/DesignWithMeta.xml)

add_custom_command(
	OUTPUT ${DESIGN_FILE}
	COMMENT "merge user and meta designs one complete design file" 
	DEPENDS ${CMAKE_CURRENT_LIST_DIR}/../FrameworkInternals/merge_design_and_meta.py
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND ${PYTHON_COMMAND} ${PROJECT_SOURCE_DIR}/FrameworkInternals/merge_design_and_meta.py --user_file ${PROJECT_SOURCE_DIR}/Design/Design.xml --meta_file ${PROJECT_SOURCE_DIR}/Meta/design/meta-design.xml --merged_file ${DESIGN_FILE}
	VERBATIM
)

include_directories(${PROJECT_BINARY_DIR}/generated)
add_dependencies (Meta Configuration.hxx_GENERATED AddressSpace runBuildInfoGeneratorPy designWithMeta)
