<?xml version="1.0" encoding="UTF-8"?>
<!-- Â© Copyright CERN, 2015.                                                       -->
<!-- All rights not expressly granted are reserved.                                -->
<!-- This file is part of Quasar.                                                  -->
<!--                                                                               -->
<!-- Quasar is free software: you can redistribute it and/or modify                -->
<!-- it under the terms of the GNU Lesser General Public Licence as published by   -->
<!-- the Free Software Foundation, either version 3 of the Licence.                -->
<!-- Quasar is distributed in the hope that it will be useful,                     -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of                -->
<!--                                                                               -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                 -->
<!-- GNU Lesser General Public Licence for more details.                           -->
<!--                                                                               -->
<!-- You should have received a copy of the GNU Lesser General Public License      -->
<!-- along with Quasar.  If not, see <http://www.gnu.org/licenses/>                -->
<!--                                                                               -->
<!-- Created:   Jun 2014                                                           -->
<!-- Authors:                                                                      -->
<!--   Piotr Nikiel <piotr@nikiel.info>                                            -->

<schema xmlns="http://www.w3.org/2001/XMLSchema"
targetNamespace="http://cern.ch/quasar/Design"
xmlns:tns="http://cern.ch/quasar/Design"
elementFormDefault="qualified">

  <complexType name="Design">
    <sequence>
      <element name="class" type="tns:Class" maxOccurs="unbounded" minOccurs="0">
        <!-- Restriction: uniqueness among names of cachevariable, sourcevariable, configentry -->
        <key name="variableKey">
          <selector xpath="tns:cachevariable|tns:configentry|tns:sourcevariable"/>
          <field xpath="@name"/>
        </key>
        <keyref name="__class__cachevariable__name__" refer="tns:variableKey">
          <selector xpath="tns:cachevariable"/>
          <field xpath="@name"/>
        </keyref>
        <keyref name="__class__configentry__name__" refer="tns:variableKey">
          <selector xpath="tns:configentry"/>
          <field xpath="@name"/>
        </keyref>
        <keyref name="__class__sourcevariable__name__" refer="tns:variableKey">
          <selector xpath="tns:sourcevariable"/>
          <field xpath="@name"/>
        </keyref>
        <unique name="classHasObjectsUniqueChildClass">
          <selector xpath="tns:hasobjects"/>
          <field xpath="@class"/>
        </unique>
      </element>
      <element name="root" type="tns:Root" maxOccurs="1" minOccurs="1">
        <unique name="rootHasObjectsUniqueClass">
          <selector xpath="tns:hasobjects"/>
          <field xpath="@class"/>
        </unique>
      </element>
    </sequence>
    <attribute name="projectShortName" type="tns:NonEmptyString" use="required"/>
    <attribute name="author" type="string"/>
  </complexType>
  <element name="design" type="tns:Design">
    <!--  Restriction: no duplicate class names.  -->
    <key name="classKey">
      <selector xpath="tns:class"/>
      <field xpath="@name"/>
    </key>
    <keyref name="__class__hasobjects__classkey__" refer="tns:classKey">
      <selector xpath="tns:class/tns:hasobjects"/>
      <field xpath="@class"/>
    </keyref>
    <keyref name="__root__hasobjects__classkey__" refer="tns:classKey">
      <selector xpath="tns:root/tns:hasobjects"/>
      <field xpath="@class"/>
    </keyref>
  </element>
  <complexType name="Class">
    <sequence>
      <element name="devicelogic" type="tns:DeviceLogic" minOccurs="0" maxOccurs="1"/>
      <sequence minOccurs="0" maxOccurs="unbounded">
        <choice>
          <element name="cachevariable" type="tns:CacheVariable"/>
          <element name="sourcevariable" type="tns:SourceVariable"/>
          <element name="method" type="tns:Method"/>
          <element name="hasobjects" type="tns:HasObjects"/>
          <element name="configentry" type="tns:ConfigEntry"/>
        </choice>
      </sequence>
      <element name="documentation" type="tns:Documentation" minOccurs="0" maxOccurs="1"/>
    </sequence>
    <attribute name="name" type="tns:ClassName" use="required"/>
    <attribute name="singleVariableNode" type="boolean" use="optional"/>
    <attribute name="defaultInstanceName" type="tns:ObjectName" use="optional">
      <annotation>
        <documentation>Applicable only to singleton classes. When used, attribute contents becomes the default name.</documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="CacheVariable">
    <all>
      <element name="documentation" type="tns:Documentation" minOccurs="0" maxOccurs="1"/>
      <element name="array" type="tns:Array" maxOccurs="1" minOccurs="0"/>
      <element name="configRestriction" type="tns:ConfigRestriction" minOccurs="0" maxOccurs="1"/>
    </all>
    <attribute name="name" type="tns:VariableName" use="required"/>
    <attribute name="addressSpaceWrite" type="tns:CacheVariableAddressSpaceWrite" use="required">
      <annotation>
        <documentation>
                When "forbidden", any OPCUA write transaction will be denied with BadUserAccessDenied status.
                When "regular", OPCUA write transactions matching chosen data type (or NULL if allowed) will be accepted and handled automatically.
                When "delegated", OPCUA write transactions matching chosen data type (or NULL if allowed) will be first routed to the handler generated in Device Logic class, and stored in the cache only when the handler returns with Good status.
                Note that choosing "forbidden" or "regular" doesn't generate any handler in the Device Logic class, but "delegated" does.
                Note also that handler generated with "delegated" will be executed from the network thread, so it is not supposed to be blocking. For blocking handlers it is better to consider SourceVariable.
                </documentation>
      </annotation>
    </attribute>
    <attribute name="dataType" type="tns:VariableDataType" use="required"/>
    <attribute name="initializeWith" type="tns:VariableInitializeWith" use="required"/>
    <attribute name="initialValue" type="string">
      <annotation>
        <documentation>
                Meaningful only when initializeWith="valueAndStatus". When this is the case, the value of this field specifies
                initial value of this variable, i.e. 3.563 for floats or "ABCDE" for UaString or OpcUa_True for booleans.
                Skipping this attribute will keep initialize this variable with NULL (provided that nullPolicy="nullAllowed").
                </documentation>
      </annotation>
    </attribute>
    <attribute name="initialStatus" type="tns:VariableInitialStatus">
      <annotation>
        <documentation>
                        Meaningful only when initializeWith="valueAndStatus", and then this is mandatory field.
                </documentation>
      </annotation>
    </attribute>
    <attribute name="nullPolicy" type="tns:NullPolicy" use="required">
      <annotation>
        <documentation>
                Sets whether NULL is accepted (applies to initialization, address space setters and write transactions by OPCUA client).
                When "nullForbidden", no address space setter for NULL will be generated, and write transactions requesting storing NULL will be denied.
                Note that when "nullAllowed" is chosen, compact address space getters will not be generated (i.e. double getValue()), and only long ones will exist (i.e. UaStatus getValue(double&amp; retval)).
                </documentation>
      </annotation>
    </attribute>
    <attribute name="defaultConfigInitializerValue" type="string" use="optional"/>
  </complexType>
  <simpleType name="CacheVariableAddressSpaceWrite">
    <restriction base="string">
      <enumeration value="forbidden"/>
      <enumeration value="delegated"/>
      <enumeration value="regular"/>
    </restriction>
  </simpleType>
  <complexType name="HasObjects">
    <sequence>
      <element name="object" type="tns:Object" maxOccurs="unbounded" minOccurs="0">
                </element>
    </sequence>
    <attribute name="class" type="string" use="required"/>
    <attribute name="instantiateUsing" type="tns:HasObjectsInstantiatedUsing" use="required"/>
    <attribute name="minOccurs" type="unsignedLong" use="optional" default="0"/>
    <attribute name="maxOccurs" type="unsignedLong" use="optional" default="4294967295"/>
  </complexType>
  <simpleType name="VariableDataType">
    <restriction base="string">
      <enumeration value="OpcUa_Double"/>
      <enumeration value="OpcUa_Float"/>
      <enumeration value="OpcUa_Byte"/>
      <enumeration value="OpcUa_SByte"/>
      <enumeration value="OpcUa_Int16"/>
      <enumeration value="OpcUa_UInt16"/>
      <enumeration value="OpcUa_Int32"/>
      <enumeration value="OpcUa_UInt32"/>
      <enumeration value="OpcUa_Int64"/>
      <enumeration value="OpcUa_UInt64"/>
      <enumeration value="OpcUa_Boolean"/>
      <enumeration value="UaString"/>
      <enumeration value="UaVariant"/>
      <enumeration value="UaByteString"/>
    </restriction>
  </simpleType>
  <simpleType name="VariableInitializeWith">
    <restriction base="string">
      <enumeration value="configuration"/>
      <enumeration value="valueAndStatus"/>
    </restriction>
  </simpleType>
  <simpleType name="VariableName">
    <restriction base="string">
      <minLength value="1"/>
      <pattern value="[a-zA-Z]([A-Z]|[a-z]|\d|_)*"/>
    </restriction>
  </simpleType>
  <complexType name="Root">
    <sequence>
      <element name="hasobjects" type="tns:HasObjects" maxOccurs="unbounded" minOccurs="0"/>
    </sequence>
  </complexType>
  <simpleType name="VariableInitialStatus">
    <restriction base="string">
      <enumeration value="OpcUa_Good"/>
      <enumeration value="OpcUa_Bad"/>
      <enumeration value="OpcUa_BadWaitingForInitialData"/>
    </restriction>
  </simpleType>
  <simpleType name="HasObjectsInstantiatedUsing">
    <restriction base="string">
      <enumeration value="configuration"/>
      <enumeration value="design"/>
    </restriction>
  </simpleType>
  <simpleType name="ObjectName">
    <restriction base="string">
      <minLength value="1"/>
    </restriction>
  </simpleType>
  <complexType name="Object">
    <attribute name="name" type="tns:ObjectName"/>
  </complexType>
  <simpleType name="ClassName">
    <restriction base="string">
      <minLength value="1"/>
      <pattern value="[A-Z]([a-z]|[A-Z]|\d)*"/>
    </restriction>
  </simpleType>
  <complexType name="SourceVariable">
    <sequence>
      <element name="documentation" type="tns:Documentation" minOccurs="0" maxOccurs="1"/>
    </sequence>
    <attribute name="name" type="tns:VariableName" use="required"/>
    <attribute name="dataType" type="tns:VariableDataType" use="required"/>
    <attribute name="addressSpaceWrite" type="tns:SourceVariableAddressSpaceWrite" use="required">
      <annotation>
        <documentation>
         When "forbidden", any OPCUA write transaction will be denied with BadUserAccessDenied status.
         For "synchronous" and "asynchronous", OPCUA write transactions matching chosen data type (or NULL if allowed) will be routed to the handler generated in Device Logic class.
         When "synchronous", the handler will be executed in the thread processing the request, so it must be non-blocking.
         When "asynchronous", the handler will be executed in a separate thread from the source variables thread pool.
         </documentation>
      </annotation>
    </attribute>
    <attribute name="addressSpaceRead" type="tns:SourceVariableAddressSpaceRead" use="required">
      <annotation>
        <documentation>
         When "forbidden", any OPCUA read transaction will be denied with BadUserAccessDenied status.
         For "synchronous" and "asynchronous", OPCUA read transactions will be routed to the handler generated in Device Logic class.
         When "synchronous", the handler will be executed in the thread processing the request, so it must be non-blocking.
         When "asynchronous", the handler will be executed in a separate thread from the source variables thread pool.
         </documentation>
      </annotation>
    </attribute>
    <attribute name="addressSpaceWriteUseMutex" type="tns:SourceVariableAddressSpaceOperationUseMutex" use="required">
      <annotation>
        <documentation>
        If different than "no", the lock of chosen object will be acquired before calling the handler, and released afterwards.
        This is especially useful for "asynchronous" handler.
        </documentation>
      </annotation>
    </attribute>
    <attribute name="addressSpaceReadUseMutex" type="tns:SourceVariableAddressSpaceOperationUseMutex" use="required">
      <annotation>
        <documentation>
        If different than "no", the lock of chosen object will be acquired before calling the handler, and released afterwards.
        This is especially useful for "asynchronous" handler.
        </documentation>
      </annotation>
    </attribute>
  </complexType>
  <simpleType name="SourceVariableAddressSpaceWrite">
    <restriction base="string">
      <enumeration value="forbidden"/>
      <enumeration value="asynchronous"/>
      <enumeration value="synchronous"/>
    </restriction>
  </simpleType>
  <simpleType name="SourceVariableAddressSpaceRead">
    <restriction base="string">
      <enumeration value="forbidden"/>
      <enumeration value="asynchronous"/>
      <enumeration value="synchronous"/>
    </restriction>
  </simpleType>
  <simpleType name="SourceVariableAddressSpaceOperationUseMutex">
    <restriction base="string">
      <enumeration value="no"/>
      <enumeration value="of_this_operation"/>
      <enumeration value="of_this_variable"/>
      <enumeration value="of_containing_object"/>
      <enumeration value="of_parent_of_containing_object"/>
      <enumeration value="handpicked"/>
    </restriction>
  </simpleType>
  <simpleType name="ConfigEntryDataType">
    <!--  this is essentially anything that variable data type might be apart from UaVariant -->
    <restriction base="string">
      <enumeration value="OpcUa_Double"/>
      <enumeration value="OpcUa_Float"/>
      <enumeration value="OpcUa_Byte"/>
      <enumeration value="OpcUa_SByte"/>
      <enumeration value="OpcUa_Int16"/>
      <enumeration value="OpcUa_UInt16"/>
      <enumeration value="OpcUa_Int32"/>
      <enumeration value="OpcUa_UInt32"/>
      <enumeration value="OpcUa_Int64"/>
      <enumeration value="OpcUa_UInt64"/>
      <enumeration value="OpcUa_Boolean"/>
      <enumeration value="UaString"/>
    </restriction>
  </simpleType>
  <complexType name="ConfigEntry">
    <all>
      <element name="documentation" type="tns:Documentation" maxOccurs="1" minOccurs="0"/>
      <element name="array" type="tns:Array" maxOccurs="1" minOccurs="0"/>
      <element name="configRestriction" type="tns:ConfigRestriction" minOccurs="0" maxOccurs="1"/>
    </all>
    <attribute name="name" type="tns:VariableName" use="required"/>
    <attribute name="dataType" type="tns:ConfigEntryDataType" use="required"/>
    <attribute name="isKey" type="boolean"/>
    <attribute name="storedInDeviceObject" type="boolean" use="optional"/>
    <attribute name="defaultValue" type="string" use="optional"/>
  </complexType>
  <simpleType name="NullPolicy">
    <restriction base="string">
      <enumeration value="nullAllowed"/>
      <enumeration value="nullForbidden"/>
    </restriction>
  </simpleType>
  <complexType name="Documentation" mixed="true">
    <sequence>
      <any minOccurs="0" maxOccurs="unbounded" processContents="skip"/>
    </sequence>
  </complexType>
  <simpleType name="ArraySizeLimits">
    <restriction base="unsignedInt">
      <minInclusive value="0"/>
      <maxInclusive value="104857600"/>
    </restriction>
  </simpleType>
  <complexType name="Array">
    <attribute name="minimumSize" type="tns:ArraySizeLimits"/>
    <attribute name="maximumSize" type="tns:ArraySizeLimits"/>
  </complexType>
  <complexType name="DeviceLogic">
    <sequence>
      <element name="mutex" type="tns:DeviceLogicMutex" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </complexType>
  <complexType name="DeviceLogicMutex"/>
  <complexType name="Method">
    <sequence>
      <element name="argument" type="tns:MethodArgument" minOccurs="0" maxOccurs="unbounded"/>
      <element name="returnvalue" type="tns:MethodReturnValue" minOccurs="0" maxOccurs="unbounded"/>
      <element name="documentation" type="tns:Documentation" maxOccurs="1" minOccurs="0"/>
    </sequence>
    <attribute name="name" type="tns:VariableName" use="required"/>
    <attribute name="executionSynchronicity" type="tns:MethodExecutionSynchronicity" use="required"/>
    <attribute name="addressSpaceCallUseMutex" type="tns:MethodCallUseMutex" use="required"/>
  </complexType>
  <complexType name="MethodArgument">
    <sequence>
      <element name="array" type="tns:Array" minOccurs="0" maxOccurs="1"/>
      <element name="documentation" type="tns:Documentation" maxOccurs="1" minOccurs="0"/>
    </sequence>
    <attribute name="name" type="tns:VariableName" use="required"/>
    <attribute name="dataType" type="tns:VariableDataType" use="required"/>
  </complexType>
  <complexType name="MethodReturnValue">
    <sequence>
      <element name="array" type="tns:Array" maxOccurs="1" minOccurs="0"/>
      <element name="documentation" type="tns:Documentation" maxOccurs="1" minOccurs="0"/>
    </sequence>
    <attribute name="dataType" type="tns:VariableDataType" use="required"/>
    <attribute name="name" type="tns:VariableName" use="required"/>
  </complexType>
  <simpleType name="MethodExecutionSynchronicity">
    <restriction base="string">
      <enumeration value="synchronous"/>
      <enumeration value="asynchronous"/>
    </restriction>
  </simpleType>
  <simpleType name="MethodCallUseMutex">
    <restriction base="string">
      <enumeration value="no"/>
      <enumeration value="of_this_method"/>
      <enumeration value="of_containing_object"/>
    </restriction>
  </simpleType>
  <complexType name="ConfigRestriction">
    <all>
      <element name="restrictionByPattern" type="tns:RestrictionByPattern" maxOccurs="1" minOccurs="0"/>
      <element name="restrictionByEnumeration" type="tns:RestrictionByEnumeration" minOccurs="0" maxOccurs="1"/>
      <element name="restrictionByBounds" type="tns:RestrictionByBounds" minOccurs="0" maxOccurs="1"/>
    </all>
  </complexType>
  <complexType name="RestrictionByPattern">
    <attribute name="pattern" type="string" use="required"/>
  </complexType>
  <complexType name="RestrictionByEnumeration">
    <sequence minOccurs="0" maxOccurs="unbounded">
      <element name="enumerationValue" type="tns:EnumerationValue"/>
    </sequence>
  </complexType>
  <simpleType name="NonEmptyString">
    <restriction base="string">
      <minLength value="1"/>
    </restriction>
  </simpleType>
  <complexType name="EnumerationValue">
    <sequence>
      <element name="documentation" type="tns:Documentation" maxOccurs="1" minOccurs="0"/>
    </sequence>
    <attribute name="value" use="required" type="tns:NonEmptyString"/>
  </complexType>
  <complexType name="RestrictionByBounds">
    <attribute name="minExclusive" type="double" use="optional"/>
    <attribute name="minInclusive" type="double" use="optional"/>
    <attribute name="maxExclusive" type="double" use="optional"/>
    <attribute name="maxInclusive" type="double" use="optional"/>
  </complexType>
</schema>
