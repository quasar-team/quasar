{# Copyright CERN, 2015.                                                         #}
{# All rights not expressly granted are reserved.                                #}
{# This file is part of Quasar.                                                  #}
{#                                                                               #}
{# Quasar is free software: you can redistribute it and/or modify                #}
{# it under the terms of the GNU Lesser General Public Licence as published by   #}
{# the Free Software Foundation, either version 3 of the Licence.                #}
{# Quasar is distributed in the hope that it will be useful,                     #}
{# but WITHOUT ANY WARRANTY; without even the implied warranty of                #}
{#                                                                               #}
{# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                 #}
{# GNU Lesser General Public Licence for more details.                           #}
{#                                                                               #}
{# You should have received a copy of the GNU Lesser General Public License      #}
{# along with Quasar.  If not, see <http://www.gnu.org/licenses/>                #}
{#                                                                               #}
{# Created:   Jul 2014                                                           #}
{#            Mar 2020 (translated to Jinja2)                                    #}
{# Authors:                                                                      #}
{#   Piotr Nikiel <piotr@nikiel.info>                                            #}
{#   Ben Farnham  <firstNm.secondNm@cern.ch>                                     #}
{% import 'headers.jinja' as headers %}
{% set this = designInspector.objectify_root() %}

{% macro writeRestrictions(containingClassName, objectName) %}
  {% set restrictions=designInspector.get_restrictions(containingClassName, objectName) %}

  {% if restrictions|length>0 %}
    <div style="background-color: #ffefef"><font color="red">Value restrictions</font>
    {% for restriction in restrictions %}
      {% if restriction['type'] == 'byEnumeration' %}
        <br/>Enumeration:
        {% for enumerationValue in restriction['enumerationValues'] -%}
          <code>{{enumerationValue}}{{'|' if not loop.last}}</code>          
        {%- endfor %}
      {% elif restriction['type'] == 'byPattern' %}
        <br/>Pattern:
        <code>{{restriction['pattern']}}</code>
      {% elif restriction['type'] == 'byBounds' %}
        <br/>Bounds:
        {% set boundsRestrictionPrefix="" %}
        {% if restriction['minExclusive'] %}
          <code>{{boundsRestrictionPrefix}}{{objectName}}&gt;{{restriction['minExclusive']}}</code>
          {% set boundsRestrictionPrefix=" AND " %}
        {% endif %}
        {% if restriction['maxExclusive'] %}
          <code>{{boundsRestrictionPrefix}}{{objectName}}&lt;{{restriction['maxExclusive']}}</code>
          {% set boundsRestrictionPrefix=" AND " %}
        {% endif %}
        {% if restriction['minInclusive'] %}
          <code>{{boundsRestrictionPrefix}}{{objectName}}&gt;={{restriction['minInclusive']}}</code>
          {% set boundsRestrictionPrefix=" AND " %}
        {% endif %}
        {% if restriction['maxInclusive'] %}
          <code>{{boundsRestrictionPrefix}}{{objectName}}&lt;={{restriction['maxInclusive']}}</code>
          {% set boundsRestrictionPrefix=" AND " %}
        {% endif %}
      {% endif %}
    {% endfor %}
    </div>
  {% endif %}
{% endmacro %}

{% macro writeCacheVarOrConfigEntry(containingClassName, elementObject) %}
  {% set objectName=elementObject.get('name') %}
  {% set objectType=elementObject.get('dataType') %}
  {% set optionalityMsg = 'optional, the default value shown below will be used if not present' if elementObject.get('defaultValue') else 'mandatory' %}
  <b>{{objectName}}</b> ({{objectType}}) {{optionalityMsg}}
  {% set docElements=designInspector.objectifyDocumentation(containingClassName, objectName) %}
  {% if docElements|length > 0 %}
    <div style="background-color:#eeeeff"><font color="blue">DOC</font>
    {{docElements[0].text}}
    </div>
  {% endif %}  
  {% if elementObject.get('defaultValue') %}
    <div style="background-color: #efffef"><b>Default value:</b> {{elementObject.get('defaultValue')}}</div>
  {% endif %}
  {{ writeRestrictions(containingClassName, objectName) }}
{% endmacro %}
    
<html>
  <h1>Configuration documentation for {{designInspector.getProjectName()}}</h1>
  
  Jump to:
  {% for className in designInspector.get_names_of_all_classes()|sort() %}
    {% set parentObjects = designInspector.objectifyAllParents(className, restrict_to_by_configuration=True) %}
    {% if parentObjects|length > 0 %}
      <a href="#class_{{className}}">{{className}}</a>
    {% endif %}
  {% endfor %}

  {% for className in designInspector.get_names_of_all_classes()|sort() %}
    {% set parentObjects = designInspector.objectifyAllParents(className, restrict_to_by_configuration=True) %}
    {% if parentObjects|length > 0 %}
      <a id="class_{{className}}"><h2>{{className}}</h2></a>
      {% set documentation=designInspector.objectifyDocumentation(className) %}
      {% if documentation %}
        <div style="background-color:#eeeeff"><font color="blue">DOC</font>
            {{ documentation[0].text }}
        </div>
        <br/>
      {% endif %}
      
      Configuration attributes:
      <ul>
      {% set configEntries= designInspector.objectify_config_entries(className) %}      
      {% if configEntries|length > 0 %}
        {% for configEntry in configEntries %}
          <li>
          {{ writeCacheVarOrConfigEntry(className, configEntry) }}
          </li>
        {% endfor %}
      {% else %}
	      Class {{className}} has no configuration entries.
      {% endif %}
    
      {% set configuredCacheVars = designInspector.objectify_cache_variables(className, restrict_by="[@initializeWith='configuration']") %}
      {% if configuredCacheVars |length > 0 %}
        {% for cacheVar in configuredCacheVars %}
          <li>
          {{ writeCacheVarOrConfigEntry(className, cacheVar) }}
          </li>
        {% endfor %}
      {% else %}
	      Class {{className}} has no cache variables initialized from the configuration.
      {% endif %}
      </ul>
      
      Possible children:
      <a href="#class_CalculatedVariable">CalculatedVariable</a>
      {% for hasObject in designInspector.get_class_has_objects(className) %}
        {% if hasObject.get('instantiateUsing')=='configuration' %}
          <a href="#class_{{hasObject.get('class')}}">{{hasObject.get('class')}}</a>
        {% endif %}
      {% endfor %}
      
    {% endif %}
  {% endfor %}
  
  <a id="class_CalculatedVariable"><h2>CalculatedVariable</h2></a>
  A CalculatedVariable is a "synthetic" variable which is based on other "real" variables of the address-space.
  You can declare a CalculatedVariable under any object in the configuration file.
  The required attributes are:
  <ul>
    <li>name - will be the last part of the address</li>
    <li>value - analytical formula used to calculate value of the variable. 
        E.g. to calculate square of another variable with address x.y you should put <code>x.y^2</code></li>
  </ul>
  Detailed documentation of all features of CalculatedVariables is available in quasar Documentation.    
  
</html>