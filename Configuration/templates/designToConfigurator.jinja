{# Â© Copyright CERN, 2015.                                                      #}
{# All rights not expressly granted are reserved.                                #}
{# This file is part of Quasar.                                                  #}
{#                                                                               #}
{# Quasar is free software: you can redistribute it and/or modify                #}
{# it under the terms of the GNU Lesser General Public Licence as published by   #}
{# the Free Software Foundation, either version 3 of the Licence.                #}
{# Quasar is distributed in the hope that it will be useful,                     #}
{# but WITHOUT ANY WARRANTY; without even the implied warranty of                #}
{#                                                                               #}
{# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                 #}
{# GNU Lesser General Public Licence for more details.                           #}
{#                                                                               #}
{# You should have received a copy of the GNU Lesser General Public License      #}
{# along with Quasar.  If not, see <http://www.gnu.org/licenses/>                #}
{#                                                                               #}
{# Created:   Jul 2014                                                           #}
{#            Mar 2020 (translated to Jinja2)                                    #}
{# Authors:                                                                      #}
{#   Piotr Nikiel <piotr@nikiel.info>                                            #}
{#   Ben Farnham  <firstNm.secondNm@cern.ch>                                     #}
{% import 'headers.jinja' as headers %}
{% set this = designInspector.objectify_root() %}
{{ headers.cppFullGeneratedHeader() }}

#include <ASUtils.h>
#include <ASInformationModel.h>
#include <ASNodeQueries.h>
#include <ASCommon.h>

#include <DRoot.h>

#include <Configurator.h>
#include <Configuration.hxx>

#include <CalculatedVariablesEngine.h>
#include <FreeVariablesEngine.h>

#include <meta.h>

#include <LogIt.h>
#include <LogLevels.h>

#include <Utils.h>

// includes for AS classes and Device classes
{% for className in designInspector.get_names_of_all_classes() %}
  #include <AS{{className}}.h>
  {% if designInspector.class_has_device_logic(className) %}
    #include <D{{className}}.h>
  {% endif %}
{% endfor %}

static std::string mapSingleItemNodeFullName(std::string input)
{
  size_t singleItemNodePrefixBegins = input.find(AddressSpace::SingleItemNodeObjectPrefix);
  input.replace(
    singleItemNodePrefixBegins,
    AddressSpace::SingleItemNodeObjectPrefix.length(),
    "");
  return input;
}

{% macro writeConfigureClassFunctionSignature(className) %}

  {% if designInspector.class_has_device_logic(className) %}
    Device::D{{className}}*
  {% else %}
    void
  {% endif %}
  configure{{className}}(
    const Configuration::{{className}}& config,
    AddressSpace::ASNodeManager *nm,
    UaNodeId parentNodeId
    {% if designInspector.class_has_device_logic(className) %}
      , Device::Parent_D{{className}}* parentDevice
    {% endif %}
  )
{% endmacro %}

{% macro writeConfigureObjectByDesign(className, instanceName, parentNodeId, parentClassName, parentDevice) %}
  {
    // configure instatiate by design child object: class [{{className}}], parent class [{{parentClassName}}], instance [{{instanceName}}]
    {% if designInspector.get_class_default_instance_name(className) %}
      Configuration::{{className}} xmlObj; // empty config
      xmlObj.name("{{instanceName}}"); // set instance name
    {% else %}
      Configuration::{{className}} xmlObj("{{instanceName}}"); // empty config
    {% endif %}
    {% if not designInspector.class_has_device_logic(className) %}
      // class [{{className}}] no device logic; address space only
      configure{{className}} (xmlObj, nm, {{parentNodeId}});
    {% else %}
      {% if designInspector.class_has_legit_device_parent(className) %}
        // devices of [{{className}}] have unique device parent type [{{parentClassName}}]
        auto pDevice = configure{{className}}(xmlObj, nm, {{parentNodeId}}, {{parentDevice}});
      {% else %}
        // devices of [{{className}}] have ambiguous device parent type
        auto pDevice = configure{{className}}(xmlObj, nm, {{parentNodeId}}, nullptr);
      {% endif %}

      {% if ((designInspector.class_has_device_logic(parentClassName)) or ('Root' == parentClassName)) %}
        // register child - device (class [{{className}}]) has device parent (class [{{parentClassName}}])
        {{parentDevice}}->add(pDevice);
      {% else %}
        // register orphan - device (class [{{className}}]) has zero device logic parent class [{{parentClassName}}]
        Device::D{{className}}::registerOrphanedObject(pDevice);
      {% endif %}
    {% endif %}
  }
{% endmacro %}

{#
  macro required to account for xsdcxx generation for recursive types (i.e a type
  that can have itself as a child). Quasar recursive type is a class with hasobjects
  of itself.
  In this case, in order not to confuse calls to child collection (parent.RecType())
  and constructor RecType::RecType() xsdcxx generation appends '1' when parent is also
  RecType to:
  a) collection name: parent.RecType1()
  b) content order id: Configuration::RecType::RecType1_id
#}
{% macro innerClassName(xsdParentType, innerClass) -%}
  {{innerClass}}
  {%- if xsdParentType == innerClass -%}
    1
  {%- endif -%}
{%- endmacro %}

{% macro validateContentOrder(xsdParentType, innerObjects) %}
  {% for innerObject in innerObjects %}
    {% set innerClass = innerObject.get('class') %}
    validateContentOrder(config, config.{{innerClassName(xsdParentType, innerClass)}}(), Configuration::{{xsdParentType}}::{{innerClassName(xsdParentType, innerClass)}}_id);
  {% endfor %}
  validateContentOrder(config, config.CalculatedVariable(), Configuration::{{xsdParentType}}::CalculatedVariable_id);
{% endmacro%}

{% macro writeConfigureObjectByConfiguration(parentClassName, parentNodeId, parentDevice, innerObjects) %}
  {% set xsdParentType = 'Configuration' if 'Root' == parentClassName else parentClassName %}

  {{validateContentOrder(xsdParentType, innerObjects)}}

  // configure child nodes - content_order retains order from configuration XMl file
  for(const auto& orderedIter : config.content_order())
  {
    const auto xmlIndex = orderedIter.index;
    const auto xmlType = orderedIter.id;
    switch(xmlType)
    {
      {% for innerObject in innerObjects %}
        {% set innerClass = innerObject.get('class') %}
        case Configuration::{{xsdParentType}}::{{innerClassName(xsdParentType, innerClass)}}_id:
        {
          const auto& xmlObj(config.{{innerClassName(xsdParentType, innerClass)}}()[xmlIndex]);
          LOG(Log::DBG)<<__FUNCTION__<<" Configuring class type [id:"<<xmlType<<", nm:{{innerClass}}] ordering index ["<<xmlIndex<<"] parent class type []";
          {% if not designInspector.class_has_device_logic(innerClass) %}
            // class [{{innerClass}}] has no device logic: configure only address space object
            configure{{innerClass}} (xmlObj, nm, {{parentNodeId}});
          {% else %}
            // class [{{innerClass}}] has device logic: configure device object
            {% if designInspector.class_has_legit_device_parent(innerClass) %}
              Device::Parent_D{{innerClass}}* pInnerItemParent = {{parentDevice}};
            {% else %}
              Device::Parent_D{{innerClass}}* pInnerItemParent = nullptr;
            {% endif %}
            auto dInnerObj = configure{{innerClass}}(xmlObj, nm, {{parentNodeId}}, pInnerItemParent);

            // register class {{innerClass}}] with parent (or register orphan)
            {% if ((designInspector.class_has_device_logic(parentClassName)) or ('Root' == parentClassName)) %}
              {{parentDevice}}->add(dInnerObj);
            {% else %}
              Device::D{{innerClass}}::registerOrphanedObject(dInnerObj);
           {% endif %}
          {% endif %}
        }
        break;
      {% endfor %}
      case Configuration::{{xsdParentType}}::CalculatedVariable_id:
      {
        const auto& xmlObj(config.CalculatedVariable()[xmlIndex]);
        LOG(Log::DBG)<<__FUNCTION__<<" Configuring type [id:"<<xmlType<<", nm:CalculatedVariable] ordering index ["<<xmlIndex<<"]";
        CalculatedVariables::Engine::instantiateCalculatedVariable(nm, {{parentNodeId}}, xmlObj);
      }
      break;
      case Configuration::{{xsdParentType}}::FreeVariable_id:
      {
        const auto& freeVariableXmlElement(config.FreeVariable()[xmlIndex]);
        AddressSpace::FreeVariablesEngine::instantiateFreeVariable(nm, {{parentNodeId}}, freeVariableXmlElement);
      }
      break;
      default:
        LOG(Log::DBG)<<__FUNCTION__<<" Ignoring type [id:"<<xmlType<<"] ordering index ["<<xmlIndex<<"]"; // valid to ignore, StandardMeta etc
        break;
    }
  }
{% endmacro %}

// forward declare configure function signatures
{% for className in designInspector.get_names_of_all_classes() %}
  {{ writeConfigureClassFunctionSignature(className) }};
{% endfor %}

// configure function bodies
{% for className in designInspector.get_names_of_all_classes() %}
  {{ writeConfigureClassFunctionSignature(className) }}{
    // instantiate address space side object
    AddressSpace::AS{{className}} *asItem = new AddressSpace::AS{{className}}(
      parentNodeId,
      nm->getTypeNodeId(AddressSpace::ASInformationModel::AS_TYPE_{{className|upper}}),
      nm,
      config
   );

   {% if designInspector.class_has_device_logic(className) %}
     // instantiate device side object
     Device::D{{className}} *dItem = new Device::D{{className}}(config, parentDevice);

     // link address space side and device side objects
     asItem->linkDevice( dItem );
    {% if designInspector.is_class_single_variable_node(className) %}
      {
        dItem->linkAddressSpace( asItem, mapSingleItemNodeFullName(asItem->nodeId().toString().toUtf8()) );
      }
    {% else %}
      dItem->linkAddressSpace( asItem, asItem->nodeId().toString().toUtf8() );
    {% endif %}
   {% endif %}

  // process each 'instantiated by design' instance individually - order not important
  {% for hasObjectElement in designInspector.objectify_has_objects(className, "[@instantiateUsing='design']") %}
    {% set objClass = hasObjectElement.get('class') %}
    {% for obj in hasObjectElement.getchildren() %}
      {{writeConfigureObjectByDesign(objClass, obj.get('name'), "asItem->nodeId()", className, "dItem")}}
    {% endfor %}
  {% endfor %}

  // process each 'instatiated by config' as XML nodes - order significant (calc'd vars)
  {% set innerObjects=designInspector.objectify_has_objects(className, restrict_by="[@instantiateUsing='configuration']") %}
  {{writeConfigureObjectByConfiguration(className, "asItem->nodeId()", "dItem", innerObjects) }}

  {% if designInspector.class_has_device_logic(className) %}
    return dItem;
  {% endif %}
}
{% endfor %}

bool runConfigurationDecoration(Configuration::Configuration& theConfiguration, ConfigXmlDecoratorFunction& configXmlDecoratorFunction)
{
  if(!configXmlDecoratorFunction) return true;

  if(configXmlDecoratorFunction(theConfiguration))
  {
    return true;
  }
  else
  {
    std::cout << __FUNCTION__ << " Error: device specific configuration decoration failed, check logs for details" << std::endl;
  }
  return false;
}

std::unique_ptr<Configuration::Configuration> loadConfigurationFromFile(const std::string& fileName)
{
  try
  {
    return std::unique_ptr<Configuration::Configuration>(Configuration::configuration(fileName, ::xml_schema::flags::keep_dom));
  }
  catch (xsd::cxx::tree::parsing<char>& exception)
  {
    LOG(Log::ERR) << __FUNCTION__ << " Configuration: Failed when trying to open the configuration, with general error message: " << exception.what();
    for( const auto& error : exception.diagnostics() )
    {
      LOG(Log::ERR) << __FUNCTION__ << "Configuration: Problem at " << error.id() <<":" << error.line() << ": " << error.message();
    }
    throw std::runtime_error("Configuration: failed to load configuration file ["+fileName+"]. The exact problem description should have been logged.");
  }
}

bool configure (std::string fileName, AddressSpace::ASNodeManager *nm, ConfigXmlDecoratorFunction configXmlDecoratorFunction)
{
  std::unique_ptr<Configuration::Configuration> theConfiguration = loadConfigurationFromFile(fileName);

  CalculatedVariables::Engine::loadGenericFormulas(theConfiguration->CalculatedVariableGenericFormula());

  UaNodeId asRootNodeId = UaNodeId(OpcUaId_ObjectsFolder, 0);
  Device::DRoot *dRoot = Device::DRoot::getInstance();
  (void)dRoot; // silence-out the warning from unused variable

  configureMeta( *theConfiguration.get(), nm, asRootNodeId );
  if(!runConfigurationDecoration(*theConfiguration, configXmlDecoratorFunction)) return false;

  const Configuration::Configuration& config = *theConfiguration;

  // process each 'instantiated by design' instance individually - order not important
  {% set innerObjectsByDesign=designInspector.objectify_any("/d:design/d:root/d:hasobjects[@instantiateUsing='design']") %}
  {% for innerObj in innerObjectsByDesign %}
    {% set objClass = innerObj.get('class') %}
    {% for obj in innerObj.getchildren() %}
      {{writeConfigureObjectByDesign(objClass, obj.get('name'), "asRootNodeId", "Root", "dRoot")}}
    {% endfor %}
  {% endfor %}

  // process each 'instatiated by config' as XML nodes - order significant (calc'd vars)
  {% set innerObjectsByConfig=designInspector.objectify_any("/d:design/d:root/d:hasobjects[@instantiateUsing='configuration']") %}
  {{ writeConfigureObjectByConfiguration("Root", "asRootNodeId", "dRoot", innerObjectsByConfig) }}

  return true;
}

void unlinkAllDevices (AddressSpace::ASNodeManager *nm)
{
  unsigned int totalObjectsNumber = 0;
  {% for className in designInspector.get_names_of_all_classes() %}
    {% if designInspector.class_has_device_logic(className) %}
      {
	std::vector<AddressSpace::AS{{className}}*> objects;
	AddressSpace::findAllObjectsByPatternInNodeManager<AddressSpace::AS{{className}}>(nm, ".*", objects);
	totalObjectsNumber += objects.size();
	for(auto a : objects)
	{
	  a->unlinkDevice();
	}
      }
    {% endif %}
  {% endfor %}
  LOG(Log::INF) << __FUNCTION__ << " total number of unlinked objects: " << totalObjectsNumber;
}
