<?xml version="1.0" encoding="UTF-8"?>
{# Â© Copyright CERN, 2015.                                                       #}
{# All rights not expressly granted are reserved.                                #}
{# This file is part of Quasar.                                                  #}
{#                                                                               #}
{# Quasar is free software: you can redistribute it and/or modify                #}
{# it under the terms of the GNU Lesser General Public Licence as published by   #}
{# the Free Software Foundation, either version 3 of the Licence.                #}
{# Quasar is distributed in the hope that it will be useful,                     #}
{# but WITHOUT ANY WARRANTY; without even the implied warranty of                #}
{#                                                                               #}
{# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                 #}
{# GNU Lesser General Public Licence for more details.                           #}
{#                                                                               #}
{# You should have received a copy of the GNU Lesser General Public License      #}
{# along with Quasar.  If not, see <http://www.gnu.org/licenses/>                #}
{#                                                                               #}
{# Created:   Jul 2014                                                           #}
{#            Mar 2020 (translated to Jinja2)                                    #}
{# Authors:                                                                      #}
{#   Piotr Nikiel <piotr@nikiel.info>                                            #}
{#   Ben Farnham  <firstNm.secondNm@cern.ch>                                     #}
{% import 'headers.jinja' as headers %}
{% set this = designInspector.objectify_root() %}
{# TODO piotr{{ headers.xmlFullGeneratedHeader() }} #}

{%macro writeDocumentation(docElements) %}
  {% if docElements|length>0 %}
    <xs:annotation>
      <xs:documentation>
      {% for docElement in docElements %}
        {{ designInspector.strip_documentation_for_xsd(docElement) }}
      {% endfor %}
      </xs:documentation>
    </xs:annotation>
  {% endif %}
{% endmacro %}

{% macro writeRestrictions(className, varName, dataType, restrictions) %}
  <!--processing [{{restrictions|length}}] restrictions for class [{{className}}] name: {{varName}} dataType [{{dataType}}]-->  
  <xs:simpleType>
    <xs:restriction base="{{dataType}}">
      {% for restriction in restrictions %}
        <xs:{{restriction[0]}} value="{{restriction[1]}}"/>
      {% endfor %}
    </xs:restriction>
  </xs:simpleType>
{% endmacro %}

{% macro writeUsageAndDefaultValue(configEntry) %}
  {%- if configEntry.get('defaultValue') %}
    use="optional" default="{{configEntry.get('defaultValue')}}"
  {% else %}
    use="required"
  {% endif -%}
{% endmacro %}

{% macro writeDefaultConfigInitializerValue(cacheVar) %}
  {%- if cacheVar.get('defaultConfigInitializerValue') %}
    use="optional" default="{{cacheVar.get('defaultConfigInitializerValue')}}"
  {% else %}
    use="required"
  {% endif -%}
{% endmacro %}

{% macro writeArrayCacheVarOrConfigEntry(className, targetVar, what) %}
  {% set targetName = targetVar.get('name') %}
  {% set dataType = oracle.quasar_data_type_to_xsd_type(targetVar.get('dataType')) %}
  {% set arrayObject = designInspector.xpath_relative_to_object(targetVar, "d:array")[0] %}
  {% set restrictions = designInspector.get_restrictions(className, targetName, what) %}
  <!-- add array cacheVariable/configEntry name [{{targetName}}] type [{{dataType}}] -->
  <xs:element name="{{targetName}}">
    <xs:complexType>
      {{ writeDocumentation(designInspector.objectifyDocumentation(className, targetName)) }}
      <xs:sequence minOccurs="{{ arrayObject.get('minimumSize')|default('0', true) }}" maxOccurs="{{ arrayObject.get('maximumSize')|default('unbounded', true) }}">
        {% if restrictions|length > 0 %}
          <xs:element name="value">
            {{ writeRestrictions(className, targetName, dataType, restrictions) }}
          </xs:element>
        {% else %}
          <xs:element name="value" type="{{dataType}}"/>
        {% endif %}
      </xs:sequence>
    </xs:complexType>
  </xs:element>
{% endmacro %}

{% macro writeUniqueConstraintPerHasObjects(hasobjects_element, parent_name, parent_path) %}
  {% set class_name = hasobjects_element.get('class') %}
  {% set config_entries_keys = designInspector.objectify_config_entries(class_name, "[@isKey='true']") %}
  {% set current_path = parent_path + [parent_name] %}
  {% for ce in config_entries_keys %}
    <xs:unique name="{{ (current_path + [class_name, ce.get('name')]) | join('_') }}_is_unique">
      <xs:selector xpath="tns:{{class_name}}"/>
      <xs:field xpath="@{{ce.get('name')}}"/>
    </xs:unique>
  {% endfor %}
{% endmacro %}

<xs:schema xmlns:tns="http://cern.ch/quasar/Configuration"
  xmlns:xi="http://www.w3.org/2003/XInclude"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:d="http://cern.ch/quasar/Design"
  xmlns:fnc="http://cern.ch/quasar/Functions"
  targetNamespace="http://cern.ch/quasar/Configuration"
  elementFormDefault="qualified">

  <xs:simpleType name="ObjectName">
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="CalculatedVariable">
    <xs:attribute name="name" type="tns:ObjectName" use="required"/>
    <xs:attribute name="value" type="xs:string" use="required"/>
    <xs:attribute name="initialValue" type="xs:double" use="optional"/>
    <xs:attribute name="isBoolean" type="xs:boolean" use="optional" default="false"/>
    <xs:attribute name="status" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="CalculatedVariableGenericFormula">
    <xs:attribute name="name" type="tns:ObjectName" use="required"/>
    <xs:attribute name="formula" type="xs:string" use="required"/>
  </xs:complexType>
  
  <xs:complexType name="FreeVariable">
    <xs:attribute name="name" type="tns:ObjectName" use="required"/>
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="Boolean"/>
          <xs:enumeration value="Byte"/>
          <xs:enumeration value="SByte"/>
          <xs:enumeration value="UInt16"/>
          <xs:enumeration value="Int16"/>
          <xs:enumeration value="UInt32"/>
          <xs:enumeration value="Int32"/>
          <xs:enumeration value="UInt64"/>
          <xs:enumeration value="Int64"/>
          <xs:enumeration value="Double"/>
          <xs:enumeration value="Float"/>
          <xs:enumeration value="String"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="initialValue" type="xs:string" use="optional"/>
    <xs:attribute name="accessLevel" use="optional" default="RW">
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="R"/>
          <xs:enumeration value="RW"/>
          <xs:enumeration value="W"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
 
<!-- START BLOCK _META_BACKWARDS_COMPATIBILITY_HACK_ -->
<!-- For backwards compatibility with older quasar config files, meta configuration
     need to be able to support elements of the 2 types below -->
  <xs:complexType name="GeneralLogLevel">
    <xs:attribute name="logLevel" use="required" type="xs:string" />
  </xs:complexType>
  <xs:complexType name="ComponentLogLevel">
    <xs:attribute name="componentName" use="required" type="xs:string" />
    <xs:attribute name="logLevel" use="required" type="xs:string" />
  </xs:complexType>
<!-- END BLOCK _META_BACKWARDS_COMPATIBILITY_HACK_ -->

{% for className in designInspector.get_names_of_all_classes() %}
  <xs:complexType name="{{className}}">
   
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="CalculatedVariable" type="tns:CalculatedVariable" />
        <xs:element name="FreeVariable" type="tns:FreeVariable" />
        {% for innerClassByConfig in designInspector.objectify_has_objects(className) %}
          <xs:element name="{{innerClassByConfig.get('class')}}" type="tns:{{innerClassByConfig.get('class')}}">
            {% for innerHasObjects in designInspector.objectify_has_objects(innerClassByConfig.get('class')) %}
              {{ writeUniqueConstraintPerHasObjects(innerHasObjects, innerHasObjects.get('class'), [className, innerClassByConfig.get('class')]) }}
            {% endfor %}
          </xs:element>
        {% endfor %}
        {# START BLOCK _META_BACKWARDS_COMPATIBILITY_HACK_ #}
        {# add support for GeneralLogLevel and ComponentLogLevel elements for specifically named parents #}
        {% if className == 'Log' %}
          <xs:element name="GeneralLogLevel" type="tns:GeneralLogLevel" minOccurs="0" maxOccurs="1" />
        {% endif %}
        {% if className == 'ComponentLogLevels' %}
           <xs:element name="ComponentLogLevel" type="tns:ComponentLogLevel" minOccurs="0" maxOccurs="unbounded" />
        {% endif %}        
        {# END BLOCK _META_BACKWARDS_COMPATIBILITY_HACK_ #}
      </xs:choice>
    
	    <!-- processing array cache vars (by configuration) for class [{{className}}] -->
	    {% for arrayCacheVarByConfig in designInspector.objectify_cache_variables(className, restrict_by="[@initializeWith='configuration' and d:array]") %}
	      {{writeArrayCacheVarOrConfigEntry(className, arrayCacheVarByConfig, "cachevariable") }}
	    {% endfor %}

	    <!-- processing array config entries for class [{{className}}] -->
	    {% for arrayConfigEntry in designInspector.objectify_config_entries(className, restrict_by="[d:array]") %}
	      {{writeArrayCacheVarOrConfigEntry(className, arrayConfigEntry, "configentry") }}
	    {% endfor %}
	    
    </xs:sequence>
    
    {% if  designInspector.get_class_default_instance_name(className) %}
      <xs:attribute name="name" type="tns:ObjectName" use='optional' default="{{designInspector.get_class_default_instance_name(className)}}"/>
    {% else %}
      <xs:attribute name="name" type="tns:ObjectName" use="required"/>
    {% endif %}
    
    <!-- processing scalar cache vars for class [{{className}}] -->
    {% for scalarCacheVarByConfig in designInspector.objectify_cache_variables(className, restrict_by="[@initializeWith='configuration' and not(d:array)]") %}
      {% set cacheVarName = scalarCacheVarByConfig.get('name') %}
      {% set dataType = oracle.quasar_data_type_to_xsd_type(scalarCacheVarByConfig.get('dataType')) %}
      {% set restrictions = designInspector.get_restrictions(className, cacheVarName, "cachevariable") %}
      <!-- add scalarCacheVarByConfig name [{{cacheVarName}}] type [{{dataType}}] restriction count [{{ restrictions|length }}] -->
      {% if restrictions|length>0 %}
        {# Piotr's note: I think this Ben's condition is for future as cache variables don't have config restrictions #}
        <xs:attribute name="{{cacheVarName}}" {{writeDefaultConfigInitializerValue(scalarCacheVarByConfig)}} >
        {{ writeDocumentation(designInspector.objectifyDocumentation(className, cacheVarName)) }}
        {{ writeRestrictions(className, cacheVarName, dataType, restrictions) }}
      {% else %}
        <xs:attribute name="{{cacheVarName}}" type="{{dataType}}" {{writeDefaultConfigInitializerValue(scalarCacheVarByConfig)}} >
        {{ writeDocumentation(designInspector.objectifyDocumentation(className, cacheVarName)) }}
      {% endif %}      
      </xs:attribute>   
    {% endfor %}
    
    <!-- processing scalar config entries for class [{{className}}] -->
    {% for scalarConfigEntry in designInspector.objectify_config_entries(className, restrict_by="[not(d:array)]") %}
      {% set configEntryName = scalarConfigEntry.get('name') %}
      {% set dataType = oracle.quasar_data_type_to_xsd_type(scalarConfigEntry.get('dataType')) %}
      {% set restrictions = designInspector.get_restrictions(className, configEntryName, "configentry") %}
      <!-- add scalarConfigEntry name [{{configEntryName}}] type [{{dataType}}] restriction count [{{ restrictions|length }}] -->
      {% if restrictions|length>0 %}
       <xs:attribute name="{{configEntryName}}" {{writeUsageAndDefaultValue(scalarConfigEntry)}}>
         {{ writeDocumentation(designInspector.objectifyDocumentation(className, configEntryName)) }}
         {{ writeRestrictions(className, configEntryName, dataType, restrictions) }}
      {% else %}
        <xs:attribute name="{{configEntryName}}" {{writeUsageAndDefaultValue(scalarConfigEntry)}} type="{{dataType}}" >
        {{ writeDocumentation(designInspector.objectifyDocumentation(className, configEntryName)) }}
      {% endif %}
      </xs:attribute>   
    {% endfor %}    
        
  </xs:complexType>
{% endfor %}

<xs:complexType name="Configuration">
  <xs:sequence>
    <!-- StandardMetaData added manually - first in sequence -->
    <xs:choice minOccurs="0" maxOccurs="1">
      <xs:element name="StandardMetaData" type="tns:StandardMetaData"/>
    </xs:choice>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="CalculatedVariableGenericFormula" type="tns:CalculatedVariableGenericFormula"/>
    </xs:choice>
    <!-- add user (root) classes, except StandardMetaData -->
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      {% for hasobjects in designInspector.objectify_any("/d:design/d:root/d:hasobjects[@instantiateUsing='configuration' and not(@class='StandardMetaData')]") %}
        <xs:element name="{{hasobjects.get('class')}}" type="tns:{{hasobjects.get('class')}}">
          {% for innerHasObjects in designInspector.objectify_has_objects(hasobjects.get('class')) %}
            {{ writeUniqueConstraintPerHasObjects(innerHasObjects, innerHasObjects.get('class'), ['configuration', hasobjects.get('class')]) }}
          {% endfor %}
        </xs:element>
      {% endfor %}
    </xs:choice>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="CalculatedVariable" type="tns:CalculatedVariable"/>
      <xs:element name="FreeVariable" type="tns:FreeVariable" />
    </xs:choice>
  </xs:sequence>
</xs:complexType>

<xs:element name="configuration" type="tns:Configuration">
  {% for hasobjects in designInspector.objectify_any("/d:design/d:root/d:hasobjects[@instantiateUsing='configuration']") %}
    {{ writeUniqueConstraintPerHasObjects(hasobjects, hasobjects.get('class'), ['configuration']) }}
  {% endfor %}
</xs:element>

 </xs:schema>
