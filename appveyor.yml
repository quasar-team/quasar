# version format
version: 1.0.{build}
image: Visual Studio 2017
clone_folder: C:\workspace\OPC-UA\quasar\
build:
  verbosity: normal
notifications:
- provider: Email
  to:
  - quasar-developers@cern.ch
  subject: quasar windows build status changed
  on_build_success: false
  on_build_failure: false
  on_build_status_changed: true

environment:
  PYTHON_DIR: C:\Python38
  PATH: ${PYTHON_DIR};${PYTHON_DIR}\Scripts;C:\Program Files (x86)\CodeSynthesis XSD 4.0\bin;C:\ProgramData\chocolatey\bin\xmllint;$(PATH)
  WINDOWS_DEPENDENCIES_DIR: C:\workspace\OPC-UA\quasar-windows-dependencies
  QUASAR_TEST_PROJECT_DIR: C:\workspace\OPC-UA\quasar-test-project
  CODE_SYNTHESYS_XSD_PATH_HEADERS: C:\Program Files (x86)\CodeSynthesis XSD 4.0\include
  BOOST_PATH_HEADERS: $(WINDOWS_DEPENDENCIES_DIR)\boost\lib\native\include
  BOOST_PATH_LIBS: $(WINDOWS_DEPENDENCIES_DIR)
  OPENSSL_PATH_HEADERS: $(WINDOWS_DEPENDENCIES_DIR)\openssl-vc141-static-x86_64\build\native\include
  OPENSSL_PATH_LIBS: $(WINDOWS_DEPENDENCIES_DIR)\openssl-vc141-static-x86_64\build\native\lib\x64\static\Release
  XERCESC_PATH_HEADERS: $(WINDOWS_DEPENDENCIES_DIR)\xercesc\build\native\include
  XERCESC_PATH_LIBS: $(WINDOWS_DEPENDENCIES_DIR)\xercesc\build\native\lib\x64\v110\Release
  #
  # Set environment variables in powershell using command
  #   [System.Environment]::SetEnvironmentVariable("VAR", "C:/target/path", "Machine")')
  #

install:
  # initialize submodules (e.g. LogIt)
  - git submodule update --init --recursive

  # delete and recreate clean directory for windows dependencies.
  - ps : |
         Write-Output "Cleaning and recreating windows dependencies dir: ${env:WINDOWS_DEPENDENCIES_DIR}"
         if(Test-Path "${env:WINDOWS_DEPENDENCIES_DIR}")
         {
           Remove-Item "${env:WINDOWS_DEPENDENCIES_DIR}" -Force -Recurse;
         }
         New-Item -ItemType Directory -Force -Path "${env:WINDOWS_DEPENDENCIES_DIR}"

  # chocolatey: package manager for installing applications
  - ps : Write-Output "Installing chocolatey packages..."
  - ps : choco install git astyle xsltproc nuget.commandline --yes --limit-output # xsltproc provides xmllint
  - ps : Write-Output "Installed chocolatey packages"

  # nuget: package manager for installing libs
  - ps : Write-Output "Installing nuget packages to ${env:WINDOWS_DEPENDENCIES_DIR}"
  - ps : nuget install xercesc -NonInteractive -ExcludeVersion -OutputDirectory "${env:WINDOWS_DEPENDENCIES_DIR}"
  - ps : nuget install openssl-vc141-static-x86_64 -NonInteractive -ExcludeVersion -OutputDirectory "${env:WINDOWS_DEPENDENCIES_DIR}"
  - ps : nuget install boost-vc141 -Version 1.67.0 -NonInteractive -ExcludeVersion -OutputDirectory "${env:WINDOWS_DEPENDENCIES_DIR}"
  - ps : Write-Output "Installed nuget packages to ${env:WINDOWS_DEPENDENCIES_DIR}"

  # code synthesis stuff has no managed package: manual install
  - ps : Write-Output "Installing xsdcxx..."
  - ps : Invoke-WebRequest "https://codesynthesis.com/download/xsd/4.0/windows/i686/xsd-4.0.msi" -OutFile "${env:WINDOWS_DEPENDENCIES_DIR}\xsd-4.0.msi"
  - ps : Start-Process "${env:WINDOWS_DEPENDENCIES_DIR}\xsd-4.0.msi" -Wait -ArgumentList /quiet
  - ps : |
         if(Test-Path "C:\Program Files (x86)\CodeSynthesis XSD 4.0\bin\xsd.exe")
         {
           Write-Output "Must change xsd.exe to xsdcxx.exe to avoid clash with built-in windows xsd.exe (on some systems)";
           Copy-Item -Path "C:\Program Files (x86)\CodeSynthesis XSD 4.0\bin\xsd.exe" -Destination "C:\Program Files (x86)\CodeSynthesis XSD 4.0\bin\xsdcxx.exe";
         }
         else
         {
           Write-Output "ERROR! Failed to locate installed xsdcxx binary file, required for generating C++ handler code from XSD schema";
           Exit 1;
         }
  - ps : Write-Output "Installed xsdcxx"

  # python and libraries
  - ps : Write-Output "aliasing python.exe to python3.exe..."
  - ps : Copy-Item -Path "${env:PYTHON_DIR}\python.exe" -Destination "${env:PYTHON_DIR}\python3.exe"
  - ps : python3 --version
  - ps : Write-Output "Installing python packages..."
  - ps : python3 -m pip install --upgrade pip
  - ps : python3 -W ignore -m pip install lxml six jinja2 colorama
  - ps : Write-Output "Installed python packages"

build_script:
  - ps : git config --global user.email "quasar-developers@cern.ch"
  - ps : git config --global user.name "Quasar Developer"
  - ps : python3 quasar.py create_project ${env:QUASAR_TEST_PROJECT_DIR}
  - ps : Copy-Item -Path .\open6_win_configuration.cmake -Destination ${env:QUASAR_TEST_PROJECT_DIR}
  - ps : cd ${env:QUASAR_TEST_PROJECT_DIR} ; ls

  - ps : python3 quasar.py set_build_config open6_win_configuration.cmake
  - ps : python3 quasar.py enable_module open62541-compat
  - ps : python3 quasar.py build Release

after_build:
  - ps : Write-Output "Build completed!"
  - ps : |
         if(Test-Path "${env:QUASAR_TEST_PROJECT_DIR}\build\bin\OpcUaServer.exe")
         {
          Write-Output "Succesfully Built QUASAR test project: ${env:QUASAR_TEST_PROJECT_DIR}" ;
         }
         else
         {
          Write-Output "ERROR! The script will terminate. There was a problem building QUASAR test project - ${env:QUASAR_TEST_PROJECT_DIR}";
          Exit 1;
         }

# uncomment to block VM deletion for investigating broken builds.
on_finish:
  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
